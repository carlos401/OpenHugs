import java.util.BitSet;

COMPILER OpenHugs

void debug (String str){
  System.err.println(str);
}

boolean isFunctionCall() {
 Token next = scanner.Peek();
 return la.kind == _variableName && next.kind == _lpar;
} 

boolean isAsignment() {
 Token next = scanner.Peek();
 return la.kind == _variableName && next.kind == _asign;
} 

/*-------------------------------------------------------------------------*/

CHARACTERS
  tab           = '\u0009'. /*  9 = tabulator */
  lf            = '\u000a'. /* 10 = line feed */
  cr            = '\u000d'. /* 13 = carriage return */
  upper         = 'A' .. 'Z'.
  lower         = 'a' .. 'z'.

  digit         = "0123456789".
  letter        = upper + lower + '_' + '$'.

  stringChar    = ANY - "\"" - '\\' - cr - lf.

TOKENS
  
  lineEnd = lf {lf}.
  
  variableName = lower{lower}.
  
  className = upper{lower}.
  
  number = digit { digit } ['.' digit { digit } ].
  
  stringLit = 
  "\"" { stringChar
       | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\" )
       } 
  "\"".
  
  /*----- operators and special characters needed in LL(1) resolvers --------------*/
  comma   = ",".
  dec     = "--".
  dot     = ".".
  inc     = "++".
  lbrace  = "{".
  lbrack  = "[".
  lpar    = "(".
  minus   = "-".
  not     = "!".
  plus    = "+".
  rbrace  = "}".
  rbrack  = "]".
  rpar    = ")".
  tilde   = "~".
  asign = ":=".
  mul = "*".
  div = "/".
  colon = ":".
  leq = "<=".
  geq = ">=".
  
  /*----- Reserved words ----------------------------------------------------------*/
  
  si = "SI".
  mientras = "MIENTRAS".
  sino = "SINO".
  clase = "CLASE".
  incorporar = "INCORPORAR".
  funcion = "FUNCION".
  numero = "NUMERO".
  palabra = "PALABRA".
  returns = "RETORNA".
  


COMMENTS FROM ";;" TO ";;"
COMMENTS FROM ";" TO lf

IGNORE cr + tab

/*---------------------------------------------------------------------------*/

PRODUCTIONS

OpenHugs = {include} classDeclaration {classDeclaration}
(. debug("Programa"); .)
.

completeClassName = className{ dot className}[ colon (typeName|className) { comma (typeName|className)} ].

include = incorporar className lineEnd
(. debug("include"); .)
.

classDeclaration = clase className [ ":" typeName {comma typeName}] classBlock [lineEnd]
(. debug("Declaracion de una clase"); .)
.

functionDeclaration =  funcion variableName lpar [typeName variableName {comma typeName variableName}] rpar [returns completeClassName] [lineEnd] StatementBlock
(. debug("Declaracion de una funcion"); .)
.

variableDeclaration = typeName variableName [asign expresion]
(. debug("Declaracion de una variable"); .)
.

assignment = variableName asign expresion
(. debug("asignacion"); .)
.

whileLoop = mientras lpar expresion rpar StatementBlock.

ifStatement = si lpar expresion rpar StatementBlock [ sino StatementBlock ].

functionCall = variableName lpar [variableName] { comma variableName} rpar.

expresion = 
  ( lpar expresion rpar
  | IF( isFunctionCall() )functionCall
  | variableName
  | number
  | expresion   ( minus expresion
                | plus expresion
                | mul expresion
                | div expresion
                | leq expresion
                | geq expresion
                | inc
                | dec )
  ).

StatementBlock = lbrace [lineEnd] { ( IF( isFunctionCall() ) functionCall 
                                      | whileLoop 
                                      | ifStatement 
                                      | assignment 
                                      | variableDeclaration 
                                    ) lineEnd } rbrace .

classBlock = lbrace lineEnd {(functionDeclaration | variableDeclaration) lineEnd} rbrace.

typeName = className | numero | palabra.

END OpenHugs.