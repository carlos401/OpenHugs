

import java.util.BitSet;



public class Parser {
	public static final int _EOF = 0;
	public static final int _lineEnd = 1;
	public static final int _variableName = 2;
	public static final int _className = 3;
	public static final int _number = 4;
	public static final int _stringLit = 5;
	public static final int _comma = 6;
	public static final int _dec = 7;
	public static final int _dot = 8;
	public static final int _inc = 9;
	public static final int _lbrace = 10;
	public static final int _lbrack = 11;
	public static final int _lpar = 12;
	public static final int _minus = 13;
	public static final int _not = 14;
	public static final int _plus = 15;
	public static final int _rbrace = 16;
	public static final int _rbrack = 17;
	public static final int _rpar = 18;
	public static final int _tilde = 19;
	public static final int _asign = 20;
	public static final int _mul = 21;
	public static final int _div = 22;
	public static final int _si = 23;
	public static final int _mientras = 24;
	public static final int _sino = 25;
	public static final int _clase = 26;
	public static final int _incorporar = 27;
	public static final int _funcion = 28;
	public static final int _numero = 29;
	public static final int _palabra = 30;
	public static final int maxT = 31;

	static final boolean _T = true;
	static final boolean _x = false;
	static final int minErrDist = 2;

	public Token t;    // last recognized token
	public Token la;   // lookahead token
	int errDist = minErrDist;
	
	public Scanner scanner;
	public Errors errors;

	void debug (String str){
  System.err.println(str);
}

boolean isFunctionCall() {
 Token next = scanner.Peek();
 return la.kind == _variableName && next.kind == _lpar;
} 

boolean isAsignment() {
 Token next = scanner.Peek();
 return la.kind == _variableName && next.kind == _asign;
} 

/*-------------------------------------------------------------------------*/



	public Parser(Scanner scanner) {
		this.scanner = scanner;
		errors = new Errors();
	}

	void SynErr (int n) {
		if (errDist >= minErrDist) errors.SynErr(la.line, la.col, n);
		errDist = 0;
	}

	public void SemErr (String msg) {
		if (errDist >= minErrDist) errors.SemErr(t.line, t.col, msg);
		errDist = 0;
	}
	
	void Get () {
		for (;;) {
			t = la;
			la = scanner.Scan();
			if (la.kind <= maxT) {
				++errDist;
				break;
			}

			la = t;
		}
	}
	
	void Expect (int n) {
		if (la.kind==n) Get(); else { SynErr(n); }
	}
	
	boolean StartOf (int s) {
		return set[s][la.kind];
	}
	
	void ExpectWeak (int n, int follow) {
		if (la.kind == n) Get();
		else {
			SynErr(n);
			while (!StartOf(follow)) Get();
		}
	}
	
	boolean WeakSeparator (int n, int syFol, int repFol) {
		int kind = la.kind;
		if (kind == n) { Get(); return true; }
		else if (StartOf(repFol)) return false;
		else {
			SynErr(n);
			while (!(set[syFol][kind] || set[repFol][kind] || set[0][kind])) {
				Get();
				kind = la.kind;
			}
			return StartOf(syFol);
		}
	}
	
	void OpenHugs() {
		while (StartOf(1)) {
			switch (la.kind) {
			case 23: {
				Get();
				System.out.println("Si"); 
				break;
			}
			case 24: {
				Get();
				System.out.println("mientras"); 
				break;
			}
			case 25: {
				Get();
				System.out.println("sino"); 
				break;
			}
			case 26: {
				Get();
				System.out.println("clase"); 
				break;
			}
			case 27: {
				Get();
				System.out.println("incorporar"); 
				break;
			}
			case 28: {
				Get();
				System.out.println("funcio"); 
				break;
			}
			case 29: {
				Get();
				System.out.println("numero"); 
				break;
			}
			case 30: {
				Get();
				System.out.println("palabra"); 
				break;
			}
			case 6: {
				Get();
				System.out.println("coma"); 
				break;
			}
			case 7: {
				Get();
				System.out.println("dec"); 
				break;
			}
			case 8: {
				Get();
				System.out.println("punto"); 
				break;
			}
			case 9: {
				Get();
				System.out.println("inc"); 
				break;
			}
			case 13: {
				Get();
				System.out.println("menos"); 
				break;
			}
			case 14: {
				Get();
				System.out.println("not"); 
				break;
			}
			case 12: {
				Get();
				System.out.println("parentesis izquierdo"); 
				break;
			}
			case 15: {
				Get();
				System.out.println("mas"); 
				break;
			}
			case 16: {
				Get();
				System.out.println("llave derecha"); 
				break;
			}
			case 10: {
				Get();
				System.out.println("llave izquierda"); 
				break;
			}
			case 18: {
				Get();
				System.out.println("parentesis derecho"); 
				break;
			}
			case 20: {
				Get();
				System.out.println("asignacion"); 
				break;
			}
			case 21: {
				Get();
				System.out.println("multiplicaion"); 
				break;
			}
			case 22: {
				Get();
				System.out.println("division"); 
				break;
			}
			case 3: {
				Get();
				System.out.println("nombre de clase"); 
				break;
			}
			case 2: {
				Get();
				System.out.println("nombre de variable"); 
				break;
			}
			}
		}
		System.out.println("Produccion Base"); 
	}



	public void Parse() {
		la = new Token();
		la.val = "";		
		Get();
		OpenHugs();
		Expect(0);

	}

	private static final boolean[][] set = {
		{_T,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x,_x,_x,_x, _x},
		{_x,_x,_T,_T, _x,_x,_T,_T, _T,_T,_T,_x, _T,_T,_T,_T, _T,_x,_T,_x, _T,_T,_T,_T, _T,_T,_T,_T, _T,_T,_T,_x, _x}

	};
} // end Parser


class Errors {
	public int count = 0;                                    // number of errors detected
	public java.io.PrintStream errorStream = System.out;     // error messages go to this stream
	public String errMsgFormat = "-- line {0} col {1}: {2}"; // 0=line, 1=column, 2=text
	
	protected void printMsg(int line, int column, String msg) {
		StringBuffer b = new StringBuffer(errMsgFormat);
		int pos = b.indexOf("{0}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, line); }
		pos = b.indexOf("{1}");
		if (pos >= 0) { b.delete(pos, pos+3); b.insert(pos, column); }
		pos = b.indexOf("{2}");
		if (pos >= 0) b.replace(pos, pos+3, msg);
		errorStream.println(b.toString());
	}
	
	public void SynErr (int line, int col, int n) {
		String s;
		switch (n) {
			case 0: s = "EOF expected"; break;
			case 1: s = "lineEnd expected"; break;
			case 2: s = "variableName expected"; break;
			case 3: s = "className expected"; break;
			case 4: s = "number expected"; break;
			case 5: s = "stringLit expected"; break;
			case 6: s = "comma expected"; break;
			case 7: s = "dec expected"; break;
			case 8: s = "dot expected"; break;
			case 9: s = "inc expected"; break;
			case 10: s = "lbrace expected"; break;
			case 11: s = "lbrack expected"; break;
			case 12: s = "lpar expected"; break;
			case 13: s = "minus expected"; break;
			case 14: s = "not expected"; break;
			case 15: s = "plus expected"; break;
			case 16: s = "rbrace expected"; break;
			case 17: s = "rbrack expected"; break;
			case 18: s = "rpar expected"; break;
			case 19: s = "tilde expected"; break;
			case 20: s = "asign expected"; break;
			case 21: s = "mul expected"; break;
			case 22: s = "div expected"; break;
			case 23: s = "si expected"; break;
			case 24: s = "mientras expected"; break;
			case 25: s = "sino expected"; break;
			case 26: s = "clase expected"; break;
			case 27: s = "incorporar expected"; break;
			case 28: s = "funcion expected"; break;
			case 29: s = "numero expected"; break;
			case 30: s = "palabra expected"; break;
			case 31: s = "??? expected"; break;
			default: s = "error " + n; break;
		}
		printMsg(line, col, s);
		count++;
	}

	public void SemErr (int line, int col, String s) {	
		printMsg(line, col, s);
		count++;
	}
	
	public void SemErr (String s) {
		errorStream.println(s);
		count++;
	}
	
	public void Warning (int line, int col, String s) {	
		printMsg(line, col, s);
	}
	
	public void Warning (String s) {
		errorStream.println(s);
	}
} // Errors


class FatalError extends RuntimeException {
	public static final long serialVersionUID = 1L;
	public FatalError(String s) { super(s); }
}
